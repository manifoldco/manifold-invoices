name: release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  npm:
    env:
      GITHUB_NAME: manifold-dangerzone
      GITHUB_EMAIL: 'admin+github-bot-dangerzone@manifold.co'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      # Make sure types are valid
      - run: npm install
      - run: npm run typecheck
      - run:
          git config --global user.email ${{ env.GITHUB_EMAIL }} && git config --global user.name
          ${{ env.GITHUB_NAME }} && npm version ${GITHUB_REF#refs/tags/v}
      - run: npm run changelog:release -- ${GITHUB_REF#refs/tags/v}
      - name: Commit changes (if any)
        uses: EndBug/add-and-commit@v4
        with:
          author_name: ${{ env.GITHUB_NAME }}
          author_email: ${{ env.GITHUB_EMAIL }}
          message: 'ðŸ¤– Update CHANGELOG'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: make package
      - run: 'echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc'
      - run: 'npm publish ./pkg --tag latest'
  cdn:
    env:
      BUCKET: manifold-js
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      PACKAGE: '@manifoldco/manifold-invoices' # package name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
          export_default_credentials: true
      # Make sure types are valid
      - run: npm install
      - run: npm run typecheck
      - run: make package
      # Copy all files for versioned release (/package@version/)
      - run:
          gsutil -m cp -r ${GITHUB_WORKSPACE}/pkg
          gs://${BUCKET}/${PACKAGE}@${GITHUB_REF#refs/tags/v}
      # Copy all files for latest stable release, after versioned release was successful (/package/)
      - run: gsutil -m rm gs://${BUCKET}/${PACKAGE}/** # empty latest release folder
      - run: gsutil -m cp -r ${GITHUB_WORKSPACE}/pkg gs://${BUCKET}/${PACKAGE}
